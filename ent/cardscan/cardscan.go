// Code generated by entc, DO NOT EDIT.

package cardscan

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the cardscan type in the database.
	Label = "card_scan"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldScanAt holds the string denoting the scan_at field in the database.
	FieldScanAt = "scan_at"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldResult holds the string denoting the result field in the database.
	FieldResult = "result"

	// EdgePlaylist holds the string denoting the playlist edge name in mutations.
	EdgePlaylist = "playlist"
	// EdgeCard holds the string denoting the card edge name in mutations.
	EdgeCard = "card"

	// Table holds the table name of the cardscan in the database.
	Table = "card_scans"
	// PlaylistTable is the table the holds the playlist relation/edge.
	PlaylistTable = "card_scans"
	// PlaylistInverseTable is the table name for the Playlist entity.
	// It exists in this package in order to avoid circular dependency with the "playlist" package.
	PlaylistInverseTable = "playlists"
	// PlaylistColumn is the table column denoting the playlist relation/edge.
	PlaylistColumn = "card_scan_playlist"
	// CardTable is the table the holds the card relation/edge.
	CardTable = "card_scans"
	// CardInverseTable is the table name for the Card entity.
	// It exists in this package in order to avoid circular dependency with the "card" package.
	CardInverseTable = "cards"
	// CardColumn is the table column denoting the card relation/edge.
	CardColumn = "card_scan_card"
)

// Columns holds all SQL columns for cardscan fields.
var Columns = []string{
	FieldID,
	FieldScanAt,
	FieldState,
	FieldResult,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the CardScan type.
var ForeignKeys = []string{
	"card_scan_playlist",
	"card_scan_card",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultScanAt holds the default value on creation for the "scan_at" field.
	DefaultScanAt func() time.Time
)

// State defines the type for the "state" enum field.
type State string

// StateSuccess is the default value of the State enum.
const DefaultState = StateSuccess

// State values.
const (
	StateSuccess State = "success"
	StateError   State = "error"
)

func (s State) String() string {
	return string(s)
}

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(s State) error {
	switch s {
	case StateSuccess, StateError:
		return nil
	default:
		return fmt.Errorf("cardscan: invalid enum value for state field: %q", s)
	}
}
