// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/mikejwhitehead/jukebox/ent/card"
	"github.com/mikejwhitehead/jukebox/ent/cardscan"
	"github.com/mikejwhitehead/jukebox/ent/playlist"
)

// CardScan is the model entity for the CardScan schema.
type CardScan struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ScanAt holds the value of the "scan_at" field.
	ScanAt time.Time `json:"scan_at,omitempty"`
	// State holds the value of the "state" field.
	State cardscan.State `json:"state,omitempty"`
	// Result holds the value of the "result" field.
	Result *string `json:"result,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CardScanQuery when eager-loading is set.
	Edges              CardScanEdges `json:"edges"`
	card_scan_playlist *int
	card_scan_card     *int
}

// CardScanEdges holds the relations/edges for other nodes in the graph.
type CardScanEdges struct {
	// Playlist holds the value of the playlist edge.
	Playlist *Playlist
	// Card holds the value of the card edge.
	Card *Card
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PlaylistOrErr returns the Playlist value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CardScanEdges) PlaylistOrErr() (*Playlist, error) {
	if e.loadedTypes[0] {
		if e.Playlist == nil {
			// The edge playlist was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: playlist.Label}
		}
		return e.Playlist, nil
	}
	return nil, &NotLoadedError{edge: "playlist"}
}

// CardOrErr returns the Card value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CardScanEdges) CardOrErr() (*Card, error) {
	if e.loadedTypes[1] {
		if e.Card == nil {
			// The edge card was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: card.Label}
		}
		return e.Card, nil
	}
	return nil, &NotLoadedError{edge: "card"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CardScan) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case cardscan.FieldID:
			values[i] = &sql.NullInt64{}
		case cardscan.FieldState, cardscan.FieldResult:
			values[i] = &sql.NullString{}
		case cardscan.FieldScanAt:
			values[i] = &sql.NullTime{}
		case cardscan.ForeignKeys[0]: // card_scan_playlist
			values[i] = &sql.NullInt64{}
		case cardscan.ForeignKeys[1]: // card_scan_card
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type CardScan", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CardScan fields.
func (cs *CardScan) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cardscan.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cs.ID = int(value.Int64)
		case cardscan.FieldScanAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field scan_at", values[i])
			} else if value.Valid {
				cs.ScanAt = value.Time
			}
		case cardscan.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				cs.State = cardscan.State(value.String)
			}
		case cardscan.FieldResult:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value.Valid {
				cs.Result = new(string)
				*cs.Result = value.String
			}
		case cardscan.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field card_scan_playlist", value)
			} else if value.Valid {
				cs.card_scan_playlist = new(int)
				*cs.card_scan_playlist = int(value.Int64)
			}
		case cardscan.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field card_scan_card", value)
			} else if value.Valid {
				cs.card_scan_card = new(int)
				*cs.card_scan_card = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryPlaylist queries the "playlist" edge of the CardScan entity.
func (cs *CardScan) QueryPlaylist() *PlaylistQuery {
	return (&CardScanClient{config: cs.config}).QueryPlaylist(cs)
}

// QueryCard queries the "card" edge of the CardScan entity.
func (cs *CardScan) QueryCard() *CardQuery {
	return (&CardScanClient{config: cs.config}).QueryCard(cs)
}

// Update returns a builder for updating this CardScan.
// Note that you need to call CardScan.Unwrap() before calling this method if this CardScan
// was returned from a transaction, and the transaction was committed or rolled back.
func (cs *CardScan) Update() *CardScanUpdateOne {
	return (&CardScanClient{config: cs.config}).UpdateOne(cs)
}

// Unwrap unwraps the CardScan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cs *CardScan) Unwrap() *CardScan {
	tx, ok := cs.config.driver.(*txDriver)
	if !ok {
		panic("ent: CardScan is not a transactional entity")
	}
	cs.config.driver = tx.drv
	return cs
}

// String implements the fmt.Stringer.
func (cs *CardScan) String() string {
	var builder strings.Builder
	builder.WriteString("CardScan(")
	builder.WriteString(fmt.Sprintf("id=%v", cs.ID))
	builder.WriteString(", scan_at=")
	builder.WriteString(cs.ScanAt.Format(time.ANSIC))
	builder.WriteString(", state=")
	builder.WriteString(fmt.Sprintf("%v", cs.State))
	if v := cs.Result; v != nil {
		builder.WriteString(", result=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// CardScans is a parsable slice of CardScan.
type CardScans []*CardScan

func (cs CardScans) config(cfg config) {
	for _i := range cs {
		cs[_i].config = cfg
	}
}
