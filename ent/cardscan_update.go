// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/mikejwhitehead/jukebox/ent/card"
	"github.com/mikejwhitehead/jukebox/ent/cardscan"
	"github.com/mikejwhitehead/jukebox/ent/playlist"
	"github.com/mikejwhitehead/jukebox/ent/predicate"
)

// CardScanUpdate is the builder for updating CardScan entities.
type CardScanUpdate struct {
	config
	hooks    []Hook
	mutation *CardScanMutation
}

// Where adds a new predicate for the CardScanUpdate builder.
func (csu *CardScanUpdate) Where(ps ...predicate.CardScan) *CardScanUpdate {
	csu.mutation.predicates = append(csu.mutation.predicates, ps...)
	return csu
}

// SetState sets the "state" field.
func (csu *CardScanUpdate) SetState(c cardscan.State) *CardScanUpdate {
	csu.mutation.SetState(c)
	return csu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (csu *CardScanUpdate) SetNillableState(c *cardscan.State) *CardScanUpdate {
	if c != nil {
		csu.SetState(*c)
	}
	return csu
}

// SetResult sets the "result" field.
func (csu *CardScanUpdate) SetResult(s string) *CardScanUpdate {
	csu.mutation.SetResult(s)
	return csu
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (csu *CardScanUpdate) SetNillableResult(s *string) *CardScanUpdate {
	if s != nil {
		csu.SetResult(*s)
	}
	return csu
}

// ClearResult clears the value of the "result" field.
func (csu *CardScanUpdate) ClearResult() *CardScanUpdate {
	csu.mutation.ClearResult()
	return csu
}

// SetPlaylistID sets the "playlist" edge to the Playlist entity by ID.
func (csu *CardScanUpdate) SetPlaylistID(id int) *CardScanUpdate {
	csu.mutation.SetPlaylistID(id)
	return csu
}

// SetPlaylist sets the "playlist" edge to the Playlist entity.
func (csu *CardScanUpdate) SetPlaylist(p *Playlist) *CardScanUpdate {
	return csu.SetPlaylistID(p.ID)
}

// SetCardID sets the "card" edge to the Card entity by ID.
func (csu *CardScanUpdate) SetCardID(id int) *CardScanUpdate {
	csu.mutation.SetCardID(id)
	return csu
}

// SetCard sets the "card" edge to the Card entity.
func (csu *CardScanUpdate) SetCard(c *Card) *CardScanUpdate {
	return csu.SetCardID(c.ID)
}

// Mutation returns the CardScanMutation object of the builder.
func (csu *CardScanUpdate) Mutation() *CardScanMutation {
	return csu.mutation
}

// ClearPlaylist clears the "playlist" edge to the Playlist entity.
func (csu *CardScanUpdate) ClearPlaylist() *CardScanUpdate {
	csu.mutation.ClearPlaylist()
	return csu
}

// ClearCard clears the "card" edge to the Card entity.
func (csu *CardScanUpdate) ClearCard() *CardScanUpdate {
	csu.mutation.ClearCard()
	return csu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *CardScanUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(csu.hooks) == 0 {
		if err = csu.check(); err != nil {
			return 0, err
		}
		affected, err = csu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CardScanMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = csu.check(); err != nil {
				return 0, err
			}
			csu.mutation = mutation
			affected, err = csu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(csu.hooks) - 1; i >= 0; i-- {
			mut = csu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, csu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (csu *CardScanUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *CardScanUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *CardScanUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csu *CardScanUpdate) check() error {
	if v, ok := csu.mutation.State(); ok {
		if err := cardscan.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf("ent: validator failed for field \"state\": %w", err)}
		}
	}
	if _, ok := csu.mutation.PlaylistID(); csu.mutation.PlaylistCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"playlist\"")
	}
	if _, ok := csu.mutation.CardID(); csu.mutation.CardCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"card\"")
	}
	return nil
}

func (csu *CardScanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cardscan.Table,
			Columns: cardscan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cardscan.FieldID,
			},
		},
	}
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csu.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: cardscan.FieldState,
		})
	}
	if value, ok := csu.mutation.Result(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cardscan.FieldResult,
		})
	}
	if csu.mutation.ResultCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cardscan.FieldResult,
		})
	}
	if csu.mutation.PlaylistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cardscan.PlaylistTable,
			Columns: []string{cardscan.PlaylistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: playlist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.PlaylistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cardscan.PlaylistTable,
			Columns: []string{cardscan.PlaylistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: playlist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csu.mutation.CardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cardscan.CardTable,
			Columns: []string{cardscan.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.CardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cardscan.CardTable,
			Columns: []string{cardscan.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cardscan.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CardScanUpdateOne is the builder for updating a single CardScan entity.
type CardScanUpdateOne struct {
	config
	hooks    []Hook
	mutation *CardScanMutation
}

// SetState sets the "state" field.
func (csuo *CardScanUpdateOne) SetState(c cardscan.State) *CardScanUpdateOne {
	csuo.mutation.SetState(c)
	return csuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (csuo *CardScanUpdateOne) SetNillableState(c *cardscan.State) *CardScanUpdateOne {
	if c != nil {
		csuo.SetState(*c)
	}
	return csuo
}

// SetResult sets the "result" field.
func (csuo *CardScanUpdateOne) SetResult(s string) *CardScanUpdateOne {
	csuo.mutation.SetResult(s)
	return csuo
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (csuo *CardScanUpdateOne) SetNillableResult(s *string) *CardScanUpdateOne {
	if s != nil {
		csuo.SetResult(*s)
	}
	return csuo
}

// ClearResult clears the value of the "result" field.
func (csuo *CardScanUpdateOne) ClearResult() *CardScanUpdateOne {
	csuo.mutation.ClearResult()
	return csuo
}

// SetPlaylistID sets the "playlist" edge to the Playlist entity by ID.
func (csuo *CardScanUpdateOne) SetPlaylistID(id int) *CardScanUpdateOne {
	csuo.mutation.SetPlaylistID(id)
	return csuo
}

// SetPlaylist sets the "playlist" edge to the Playlist entity.
func (csuo *CardScanUpdateOne) SetPlaylist(p *Playlist) *CardScanUpdateOne {
	return csuo.SetPlaylistID(p.ID)
}

// SetCardID sets the "card" edge to the Card entity by ID.
func (csuo *CardScanUpdateOne) SetCardID(id int) *CardScanUpdateOne {
	csuo.mutation.SetCardID(id)
	return csuo
}

// SetCard sets the "card" edge to the Card entity.
func (csuo *CardScanUpdateOne) SetCard(c *Card) *CardScanUpdateOne {
	return csuo.SetCardID(c.ID)
}

// Mutation returns the CardScanMutation object of the builder.
func (csuo *CardScanUpdateOne) Mutation() *CardScanMutation {
	return csuo.mutation
}

// ClearPlaylist clears the "playlist" edge to the Playlist entity.
func (csuo *CardScanUpdateOne) ClearPlaylist() *CardScanUpdateOne {
	csuo.mutation.ClearPlaylist()
	return csuo
}

// ClearCard clears the "card" edge to the Card entity.
func (csuo *CardScanUpdateOne) ClearCard() *CardScanUpdateOne {
	csuo.mutation.ClearCard()
	return csuo
}

// Save executes the query and returns the updated CardScan entity.
func (csuo *CardScanUpdateOne) Save(ctx context.Context) (*CardScan, error) {
	var (
		err  error
		node *CardScan
	)
	if len(csuo.hooks) == 0 {
		if err = csuo.check(); err != nil {
			return nil, err
		}
		node, err = csuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CardScanMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = csuo.check(); err != nil {
				return nil, err
			}
			csuo.mutation = mutation
			node, err = csuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(csuo.hooks) - 1; i >= 0; i-- {
			mut = csuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, csuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *CardScanUpdateOne) SaveX(ctx context.Context) *CardScan {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *CardScanUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *CardScanUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csuo *CardScanUpdateOne) check() error {
	if v, ok := csuo.mutation.State(); ok {
		if err := cardscan.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf("ent: validator failed for field \"state\": %w", err)}
		}
	}
	if _, ok := csuo.mutation.PlaylistID(); csuo.mutation.PlaylistCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"playlist\"")
	}
	if _, ok := csuo.mutation.CardID(); csuo.mutation.CardCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"card\"")
	}
	return nil
}

func (csuo *CardScanUpdateOne) sqlSave(ctx context.Context) (_node *CardScan, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cardscan.Table,
			Columns: cardscan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cardscan.FieldID,
			},
		},
	}
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CardScan.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := csuo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: cardscan.FieldState,
		})
	}
	if value, ok := csuo.mutation.Result(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cardscan.FieldResult,
		})
	}
	if csuo.mutation.ResultCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cardscan.FieldResult,
		})
	}
	if csuo.mutation.PlaylistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cardscan.PlaylistTable,
			Columns: []string{cardscan.PlaylistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: playlist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.PlaylistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cardscan.PlaylistTable,
			Columns: []string{cardscan.PlaylistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: playlist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csuo.mutation.CardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cardscan.CardTable,
			Columns: []string{cardscan.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.CardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cardscan.CardTable,
			Columns: []string{cardscan.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CardScan{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cardscan.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
