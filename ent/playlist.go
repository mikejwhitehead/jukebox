// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/mikejwhitehead/jukebox/ent/card"
	"github.com/mikejwhitehead/jukebox/ent/playlist"
)

// Playlist is the model entity for the Playlist schema.
type Playlist struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Created holds the value of the "created" field.
	Created time.Time `json:"created,omitempty"`
	// Modified holds the value of the "modified" field.
	Modified time.Time `json:"modified,omitempty"`
	// MediaURL holds the value of the "media_url" field.
	MediaURL string `json:"media_url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlaylistQuery when eager-loading is set.
	Edges PlaylistEdges `json:"edges"`
}

// PlaylistEdges holds the relations/edges for other nodes in the graph.
type PlaylistEdges struct {
	// Card holds the value of the card edge.
	Card *Card
	// CardScans holds the value of the card_scans edge.
	CardScans []*CardScan
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CardOrErr returns the Card value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlaylistEdges) CardOrErr() (*Card, error) {
	if e.loadedTypes[0] {
		if e.Card == nil {
			// The edge card was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: card.Label}
		}
		return e.Card, nil
	}
	return nil, &NotLoadedError{edge: "card"}
}

// CardScansOrErr returns the CardScans value or an error if the edge
// was not loaded in eager-loading.
func (e PlaylistEdges) CardScansOrErr() ([]*CardScan, error) {
	if e.loadedTypes[1] {
		return e.CardScans, nil
	}
	return nil, &NotLoadedError{edge: "card_scans"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Playlist) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case playlist.FieldID:
			values[i] = &sql.NullInt64{}
		case playlist.FieldName, playlist.FieldMediaURL:
			values[i] = &sql.NullString{}
		case playlist.FieldCreated, playlist.FieldModified:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Playlist", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Playlist fields.
func (pl *Playlist) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case playlist.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pl.ID = int(value.Int64)
		case playlist.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pl.Name = value.String
			}
		case playlist.FieldCreated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created", values[i])
			} else if value.Valid {
				pl.Created = value.Time
			}
		case playlist.FieldModified:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field modified", values[i])
			} else if value.Valid {
				pl.Modified = value.Time
			}
		case playlist.FieldMediaURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field media_url", values[i])
			} else if value.Valid {
				pl.MediaURL = value.String
			}
		}
	}
	return nil
}

// QueryCard queries the "card" edge of the Playlist entity.
func (pl *Playlist) QueryCard() *CardQuery {
	return (&PlaylistClient{config: pl.config}).QueryCard(pl)
}

// QueryCardScans queries the "card_scans" edge of the Playlist entity.
func (pl *Playlist) QueryCardScans() *CardScanQuery {
	return (&PlaylistClient{config: pl.config}).QueryCardScans(pl)
}

// Update returns a builder for updating this Playlist.
// Note that you need to call Playlist.Unwrap() before calling this method if this Playlist
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Playlist) Update() *PlaylistUpdateOne {
	return (&PlaylistClient{config: pl.config}).UpdateOne(pl)
}

// Unwrap unwraps the Playlist entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *Playlist) Unwrap() *Playlist {
	tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Playlist is not a transactional entity")
	}
	pl.config.driver = tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Playlist) String() string {
	var builder strings.Builder
	builder.WriteString("Playlist(")
	builder.WriteString(fmt.Sprintf("id=%v", pl.ID))
	builder.WriteString(", name=")
	builder.WriteString(pl.Name)
	builder.WriteString(", created=")
	builder.WriteString(pl.Created.Format(time.ANSIC))
	builder.WriteString(", modified=")
	builder.WriteString(pl.Modified.Format(time.ANSIC))
	builder.WriteString(", media_url=")
	builder.WriteString(pl.MediaURL)
	builder.WriteByte(')')
	return builder.String()
}

// Playlists is a parsable slice of Playlist.
type Playlists []*Playlist

func (pl Playlists) config(cfg config) {
	for _i := range pl {
		pl[_i].config = cfg
	}
}
