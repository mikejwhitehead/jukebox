// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/mikejwhitehead/jukebox/ent/card"
	"github.com/mikejwhitehead/jukebox/ent/cardscan"
	"github.com/mikejwhitehead/jukebox/ent/playlist"
	"github.com/mikejwhitehead/jukebox/ent/predicate"
)

// PlaylistUpdate is the builder for updating Playlist entities.
type PlaylistUpdate struct {
	config
	hooks    []Hook
	mutation *PlaylistMutation
}

// Where adds a new predicate for the PlaylistUpdate builder.
func (pu *PlaylistUpdate) Where(ps ...predicate.Playlist) *PlaylistUpdate {
	pu.mutation.predicates = append(pu.mutation.predicates, ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PlaylistUpdate) SetName(s string) *PlaylistUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetModified sets the "modified" field.
func (pu *PlaylistUpdate) SetModified(t time.Time) *PlaylistUpdate {
	pu.mutation.SetModified(t)
	return pu
}

// SetMediaURL sets the "media_url" field.
func (pu *PlaylistUpdate) SetMediaURL(s string) *PlaylistUpdate {
	pu.mutation.SetMediaURL(s)
	return pu
}

// SetCardID sets the "card" edge to the Card entity by ID.
func (pu *PlaylistUpdate) SetCardID(id int) *PlaylistUpdate {
	pu.mutation.SetCardID(id)
	return pu
}

// SetNillableCardID sets the "card" edge to the Card entity by ID if the given value is not nil.
func (pu *PlaylistUpdate) SetNillableCardID(id *int) *PlaylistUpdate {
	if id != nil {
		pu = pu.SetCardID(*id)
	}
	return pu
}

// SetCard sets the "card" edge to the Card entity.
func (pu *PlaylistUpdate) SetCard(c *Card) *PlaylistUpdate {
	return pu.SetCardID(c.ID)
}

// AddCardScanIDs adds the "card_scans" edge to the CardScan entity by IDs.
func (pu *PlaylistUpdate) AddCardScanIDs(ids ...int) *PlaylistUpdate {
	pu.mutation.AddCardScanIDs(ids...)
	return pu
}

// AddCardScans adds the "card_scans" edges to the CardScan entity.
func (pu *PlaylistUpdate) AddCardScans(c ...*CardScan) *PlaylistUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCardScanIDs(ids...)
}

// Mutation returns the PlaylistMutation object of the builder.
func (pu *PlaylistUpdate) Mutation() *PlaylistMutation {
	return pu.mutation
}

// ClearCard clears the "card" edge to the Card entity.
func (pu *PlaylistUpdate) ClearCard() *PlaylistUpdate {
	pu.mutation.ClearCard()
	return pu
}

// ClearCardScans clears all "card_scans" edges to the CardScan entity.
func (pu *PlaylistUpdate) ClearCardScans() *PlaylistUpdate {
	pu.mutation.ClearCardScans()
	return pu
}

// RemoveCardScanIDs removes the "card_scans" edge to CardScan entities by IDs.
func (pu *PlaylistUpdate) RemoveCardScanIDs(ids ...int) *PlaylistUpdate {
	pu.mutation.RemoveCardScanIDs(ids...)
	return pu
}

// RemoveCardScans removes "card_scans" edges to CardScan entities.
func (pu *PlaylistUpdate) RemoveCardScans(c ...*CardScan) *PlaylistUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCardScanIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlaylistUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pu.defaults()
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlaylistMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlaylistUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlaylistUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlaylistUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PlaylistUpdate) defaults() {
	if _, ok := pu.mutation.Modified(); !ok {
		v := playlist.UpdateDefaultModified()
		pu.mutation.SetModified(v)
	}
}

func (pu *PlaylistUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   playlist.Table,
			Columns: playlist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: playlist.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: playlist.FieldName,
		})
	}
	if value, ok := pu.mutation.Modified(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: playlist.FieldModified,
		})
	}
	if value, ok := pu.mutation.MediaURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: playlist.FieldMediaURL,
		})
	}
	if pu.mutation.CardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   playlist.CardTable,
			Columns: []string{playlist.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   playlist.CardTable,
			Columns: []string{playlist.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CardScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   playlist.CardScansTable,
			Columns: []string{playlist.CardScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cardscan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCardScansIDs(); len(nodes) > 0 && !pu.mutation.CardScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   playlist.CardScansTable,
			Columns: []string{playlist.CardScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cardscan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CardScansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   playlist.CardScansTable,
			Columns: []string{playlist.CardScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cardscan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playlist.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PlaylistUpdateOne is the builder for updating a single Playlist entity.
type PlaylistUpdateOne struct {
	config
	hooks    []Hook
	mutation *PlaylistMutation
}

// SetName sets the "name" field.
func (puo *PlaylistUpdateOne) SetName(s string) *PlaylistUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetModified sets the "modified" field.
func (puo *PlaylistUpdateOne) SetModified(t time.Time) *PlaylistUpdateOne {
	puo.mutation.SetModified(t)
	return puo
}

// SetMediaURL sets the "media_url" field.
func (puo *PlaylistUpdateOne) SetMediaURL(s string) *PlaylistUpdateOne {
	puo.mutation.SetMediaURL(s)
	return puo
}

// SetCardID sets the "card" edge to the Card entity by ID.
func (puo *PlaylistUpdateOne) SetCardID(id int) *PlaylistUpdateOne {
	puo.mutation.SetCardID(id)
	return puo
}

// SetNillableCardID sets the "card" edge to the Card entity by ID if the given value is not nil.
func (puo *PlaylistUpdateOne) SetNillableCardID(id *int) *PlaylistUpdateOne {
	if id != nil {
		puo = puo.SetCardID(*id)
	}
	return puo
}

// SetCard sets the "card" edge to the Card entity.
func (puo *PlaylistUpdateOne) SetCard(c *Card) *PlaylistUpdateOne {
	return puo.SetCardID(c.ID)
}

// AddCardScanIDs adds the "card_scans" edge to the CardScan entity by IDs.
func (puo *PlaylistUpdateOne) AddCardScanIDs(ids ...int) *PlaylistUpdateOne {
	puo.mutation.AddCardScanIDs(ids...)
	return puo
}

// AddCardScans adds the "card_scans" edges to the CardScan entity.
func (puo *PlaylistUpdateOne) AddCardScans(c ...*CardScan) *PlaylistUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCardScanIDs(ids...)
}

// Mutation returns the PlaylistMutation object of the builder.
func (puo *PlaylistUpdateOne) Mutation() *PlaylistMutation {
	return puo.mutation
}

// ClearCard clears the "card" edge to the Card entity.
func (puo *PlaylistUpdateOne) ClearCard() *PlaylistUpdateOne {
	puo.mutation.ClearCard()
	return puo
}

// ClearCardScans clears all "card_scans" edges to the CardScan entity.
func (puo *PlaylistUpdateOne) ClearCardScans() *PlaylistUpdateOne {
	puo.mutation.ClearCardScans()
	return puo
}

// RemoveCardScanIDs removes the "card_scans" edge to CardScan entities by IDs.
func (puo *PlaylistUpdateOne) RemoveCardScanIDs(ids ...int) *PlaylistUpdateOne {
	puo.mutation.RemoveCardScanIDs(ids...)
	return puo
}

// RemoveCardScans removes "card_scans" edges to CardScan entities.
func (puo *PlaylistUpdateOne) RemoveCardScans(c ...*CardScan) *PlaylistUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCardScanIDs(ids...)
}

// Save executes the query and returns the updated Playlist entity.
func (puo *PlaylistUpdateOne) Save(ctx context.Context) (*Playlist, error) {
	var (
		err  error
		node *Playlist
	)
	puo.defaults()
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlaylistMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlaylistUpdateOne) SaveX(ctx context.Context) *Playlist {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlaylistUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlaylistUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PlaylistUpdateOne) defaults() {
	if _, ok := puo.mutation.Modified(); !ok {
		v := playlist.UpdateDefaultModified()
		puo.mutation.SetModified(v)
	}
}

func (puo *PlaylistUpdateOne) sqlSave(ctx context.Context) (_node *Playlist, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   playlist.Table,
			Columns: playlist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: playlist.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Playlist.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: playlist.FieldName,
		})
	}
	if value, ok := puo.mutation.Modified(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: playlist.FieldModified,
		})
	}
	if value, ok := puo.mutation.MediaURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: playlist.FieldMediaURL,
		})
	}
	if puo.mutation.CardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   playlist.CardTable,
			Columns: []string{playlist.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   playlist.CardTable,
			Columns: []string{playlist.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CardScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   playlist.CardScansTable,
			Columns: []string{playlist.CardScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cardscan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCardScansIDs(); len(nodes) > 0 && !puo.mutation.CardScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   playlist.CardScansTable,
			Columns: []string{playlist.CardScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cardscan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CardScansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   playlist.CardScansTable,
			Columns: []string{playlist.CardScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cardscan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Playlist{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playlist.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
