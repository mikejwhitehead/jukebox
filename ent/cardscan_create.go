// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/mikejwhitehead/jukebox/ent/card"
	"github.com/mikejwhitehead/jukebox/ent/cardscan"
	"github.com/mikejwhitehead/jukebox/ent/playlist"
)

// CardScanCreate is the builder for creating a CardScan entity.
type CardScanCreate struct {
	config
	mutation *CardScanMutation
	hooks    []Hook
}

// SetScanAt sets the "scan_at" field.
func (csc *CardScanCreate) SetScanAt(t time.Time) *CardScanCreate {
	csc.mutation.SetScanAt(t)
	return csc
}

// SetNillableScanAt sets the "scan_at" field if the given value is not nil.
func (csc *CardScanCreate) SetNillableScanAt(t *time.Time) *CardScanCreate {
	if t != nil {
		csc.SetScanAt(*t)
	}
	return csc
}

// SetState sets the "state" field.
func (csc *CardScanCreate) SetState(c cardscan.State) *CardScanCreate {
	csc.mutation.SetState(c)
	return csc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (csc *CardScanCreate) SetNillableState(c *cardscan.State) *CardScanCreate {
	if c != nil {
		csc.SetState(*c)
	}
	return csc
}

// SetResult sets the "result" field.
func (csc *CardScanCreate) SetResult(s string) *CardScanCreate {
	csc.mutation.SetResult(s)
	return csc
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (csc *CardScanCreate) SetNillableResult(s *string) *CardScanCreate {
	if s != nil {
		csc.SetResult(*s)
	}
	return csc
}

// SetPlaylistID sets the "playlist" edge to the Playlist entity by ID.
func (csc *CardScanCreate) SetPlaylistID(id int) *CardScanCreate {
	csc.mutation.SetPlaylistID(id)
	return csc
}

// SetPlaylist sets the "playlist" edge to the Playlist entity.
func (csc *CardScanCreate) SetPlaylist(p *Playlist) *CardScanCreate {
	return csc.SetPlaylistID(p.ID)
}

// SetCardID sets the "card" edge to the Card entity by ID.
func (csc *CardScanCreate) SetCardID(id int) *CardScanCreate {
	csc.mutation.SetCardID(id)
	return csc
}

// SetCard sets the "card" edge to the Card entity.
func (csc *CardScanCreate) SetCard(c *Card) *CardScanCreate {
	return csc.SetCardID(c.ID)
}

// Mutation returns the CardScanMutation object of the builder.
func (csc *CardScanCreate) Mutation() *CardScanMutation {
	return csc.mutation
}

// Save creates the CardScan in the database.
func (csc *CardScanCreate) Save(ctx context.Context) (*CardScan, error) {
	var (
		err  error
		node *CardScan
	)
	csc.defaults()
	if len(csc.hooks) == 0 {
		if err = csc.check(); err != nil {
			return nil, err
		}
		node, err = csc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CardScanMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = csc.check(); err != nil {
				return nil, err
			}
			csc.mutation = mutation
			node, err = csc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(csc.hooks) - 1; i >= 0; i-- {
			mut = csc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, csc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (csc *CardScanCreate) SaveX(ctx context.Context) *CardScan {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (csc *CardScanCreate) defaults() {
	if _, ok := csc.mutation.ScanAt(); !ok {
		v := cardscan.DefaultScanAt()
		csc.mutation.SetScanAt(v)
	}
	if _, ok := csc.mutation.State(); !ok {
		v := cardscan.DefaultState
		csc.mutation.SetState(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csc *CardScanCreate) check() error {
	if _, ok := csc.mutation.ScanAt(); !ok {
		return &ValidationError{Name: "scan_at", err: errors.New("ent: missing required field \"scan_at\"")}
	}
	if _, ok := csc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New("ent: missing required field \"state\"")}
	}
	if v, ok := csc.mutation.State(); ok {
		if err := cardscan.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf("ent: validator failed for field \"state\": %w", err)}
		}
	}
	if _, ok := csc.mutation.PlaylistID(); !ok {
		return &ValidationError{Name: "playlist", err: errors.New("ent: missing required edge \"playlist\"")}
	}
	if _, ok := csc.mutation.CardID(); !ok {
		return &ValidationError{Name: "card", err: errors.New("ent: missing required edge \"card\"")}
	}
	return nil
}

func (csc *CardScanCreate) sqlSave(ctx context.Context) (*CardScan, error) {
	_node, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (csc *CardScanCreate) createSpec() (*CardScan, *sqlgraph.CreateSpec) {
	var (
		_node = &CardScan{config: csc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cardscan.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cardscan.FieldID,
			},
		}
	)
	if value, ok := csc.mutation.ScanAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cardscan.FieldScanAt,
		})
		_node.ScanAt = value
	}
	if value, ok := csc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: cardscan.FieldState,
		})
		_node.State = value
	}
	if value, ok := csc.mutation.Result(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cardscan.FieldResult,
		})
		_node.Result = &value
	}
	if nodes := csc.mutation.PlaylistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cardscan.PlaylistTable,
			Columns: []string{cardscan.PlaylistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: playlist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.CardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cardscan.CardTable,
			Columns: []string{cardscan.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CardScanCreateBulk is the builder for creating many CardScan entities in bulk.
type CardScanCreateBulk struct {
	config
	builders []*CardScanCreate
}

// Save creates the CardScan entities in the database.
func (cscb *CardScanCreateBulk) Save(ctx context.Context) ([]*CardScan, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cscb.builders))
	nodes := make([]*CardScan, len(cscb.builders))
	mutators := make([]Mutator, len(cscb.builders))
	for i := range cscb.builders {
		func(i int, root context.Context) {
			builder := cscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CardScanMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cscb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cscb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cscb *CardScanCreateBulk) SaveX(ctx context.Context) []*CardScan {
	v, err := cscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
