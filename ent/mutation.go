// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/mikejwhitehead/jukebox/ent/card"
	"github.com/mikejwhitehead/jukebox/ent/cardscan"
	"github.com/mikejwhitehead/jukebox/ent/playlist"
	"github.com/mikejwhitehead/jukebox/ent/predicate"

	"github.com/facebook/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCard     = "Card"
	TypeCardScan = "CardScan"
	TypePlaylist = "Playlist"
)

// CardMutation represents an operation that mutates the Card nodes in the graph.
type CardMutation struct {
	config
	op              Op
	typ             string
	id              *int
	name            *string
	created         *time.Time
	modified        *time.Time
	clearedFields   map[string]struct{}
	playlist        *int
	clearedplaylist bool
	scans           map[int]struct{}
	removedscans    map[int]struct{}
	clearedscans    bool
	done            bool
	oldValue        func(context.Context) (*Card, error)
	predicates      []predicate.Card
}

var _ ent.Mutation = (*CardMutation)(nil)

// cardOption allows management of the mutation configuration using functional options.
type cardOption func(*CardMutation)

// newCardMutation creates new mutation for the Card entity.
func newCardMutation(c config, op Op, opts ...cardOption) *CardMutation {
	m := &CardMutation{
		config:        c,
		op:            op,
		typ:           TypeCard,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCardID sets the ID field of the mutation.
func withCardID(id int) cardOption {
	return func(m *CardMutation) {
		var (
			err   error
			once  sync.Once
			value *Card
		)
		m.oldValue = func(ctx context.Context) (*Card, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Card.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCard sets the old Card of the mutation.
func withCard(node *Card) cardOption {
	return func(m *CardMutation) {
		m.oldValue = func(context.Context) (*Card, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CardMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CardMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *CardMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *CardMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CardMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Card entity.
// If the Card object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CardMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CardMutation) ResetName() {
	m.name = nil
}

// SetCreated sets the "created" field.
func (m *CardMutation) SetCreated(t time.Time) {
	m.created = &t
}

// Created returns the value of the "created" field in the mutation.
func (m *CardMutation) Created() (r time.Time, exists bool) {
	v := m.created
	if v == nil {
		return
	}
	return *v, true
}

// OldCreated returns the old "created" field's value of the Card entity.
// If the Card object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CardMutation) OldCreated(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreated: %w", err)
	}
	return oldValue.Created, nil
}

// ResetCreated resets all changes to the "created" field.
func (m *CardMutation) ResetCreated() {
	m.created = nil
}

// SetModified sets the "modified" field.
func (m *CardMutation) SetModified(t time.Time) {
	m.modified = &t
}

// Modified returns the value of the "modified" field in the mutation.
func (m *CardMutation) Modified() (r time.Time, exists bool) {
	v := m.modified
	if v == nil {
		return
	}
	return *v, true
}

// OldModified returns the old "modified" field's value of the Card entity.
// If the Card object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CardMutation) OldModified(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldModified is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldModified requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModified: %w", err)
	}
	return oldValue.Modified, nil
}

// ResetModified resets all changes to the "modified" field.
func (m *CardMutation) ResetModified() {
	m.modified = nil
}

// SetPlaylistID sets the "playlist" edge to the Playlist entity by id.
func (m *CardMutation) SetPlaylistID(id int) {
	m.playlist = &id
}

// ClearPlaylist clears the "playlist" edge to the Playlist entity.
func (m *CardMutation) ClearPlaylist() {
	m.clearedplaylist = true
}

// PlaylistCleared returns if the "playlist" edge to the Playlist entity was cleared.
func (m *CardMutation) PlaylistCleared() bool {
	return m.clearedplaylist
}

// PlaylistID returns the "playlist" edge ID in the mutation.
func (m *CardMutation) PlaylistID() (id int, exists bool) {
	if m.playlist != nil {
		return *m.playlist, true
	}
	return
}

// PlaylistIDs returns the "playlist" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PlaylistID instead. It exists only for internal usage by the builders.
func (m *CardMutation) PlaylistIDs() (ids []int) {
	if id := m.playlist; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPlaylist resets all changes to the "playlist" edge.
func (m *CardMutation) ResetPlaylist() {
	m.playlist = nil
	m.clearedplaylist = false
}

// AddScanIDs adds the "scans" edge to the CardScan entity by ids.
func (m *CardMutation) AddScanIDs(ids ...int) {
	if m.scans == nil {
		m.scans = make(map[int]struct{})
	}
	for i := range ids {
		m.scans[ids[i]] = struct{}{}
	}
}

// ClearScans clears the "scans" edge to the CardScan entity.
func (m *CardMutation) ClearScans() {
	m.clearedscans = true
}

// ScansCleared returns if the "scans" edge to the CardScan entity was cleared.
func (m *CardMutation) ScansCleared() bool {
	return m.clearedscans
}

// RemoveScanIDs removes the "scans" edge to the CardScan entity by IDs.
func (m *CardMutation) RemoveScanIDs(ids ...int) {
	if m.removedscans == nil {
		m.removedscans = make(map[int]struct{})
	}
	for i := range ids {
		m.removedscans[ids[i]] = struct{}{}
	}
}

// RemovedScans returns the removed IDs of the "scans" edge to the CardScan entity.
func (m *CardMutation) RemovedScansIDs() (ids []int) {
	for id := range m.removedscans {
		ids = append(ids, id)
	}
	return
}

// ScansIDs returns the "scans" edge IDs in the mutation.
func (m *CardMutation) ScansIDs() (ids []int) {
	for id := range m.scans {
		ids = append(ids, id)
	}
	return
}

// ResetScans resets all changes to the "scans" edge.
func (m *CardMutation) ResetScans() {
	m.scans = nil
	m.clearedscans = false
	m.removedscans = nil
}

// Op returns the operation name.
func (m *CardMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Card).
func (m *CardMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CardMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, card.FieldName)
	}
	if m.created != nil {
		fields = append(fields, card.FieldCreated)
	}
	if m.modified != nil {
		fields = append(fields, card.FieldModified)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CardMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case card.FieldName:
		return m.Name()
	case card.FieldCreated:
		return m.Created()
	case card.FieldModified:
		return m.Modified()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CardMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case card.FieldName:
		return m.OldName(ctx)
	case card.FieldCreated:
		return m.OldCreated(ctx)
	case card.FieldModified:
		return m.OldModified(ctx)
	}
	return nil, fmt.Errorf("unknown Card field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CardMutation) SetField(name string, value ent.Value) error {
	switch name {
	case card.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case card.FieldCreated:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreated(v)
		return nil
	case card.FieldModified:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModified(v)
		return nil
	}
	return fmt.Errorf("unknown Card field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CardMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CardMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CardMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Card numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CardMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CardMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CardMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Card nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CardMutation) ResetField(name string) error {
	switch name {
	case card.FieldName:
		m.ResetName()
		return nil
	case card.FieldCreated:
		m.ResetCreated()
		return nil
	case card.FieldModified:
		m.ResetModified()
		return nil
	}
	return fmt.Errorf("unknown Card field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CardMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.playlist != nil {
		edges = append(edges, card.EdgePlaylist)
	}
	if m.scans != nil {
		edges = append(edges, card.EdgeScans)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CardMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case card.EdgePlaylist:
		if id := m.playlist; id != nil {
			return []ent.Value{*id}
		}
	case card.EdgeScans:
		ids := make([]ent.Value, 0, len(m.scans))
		for id := range m.scans {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CardMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedscans != nil {
		edges = append(edges, card.EdgeScans)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CardMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case card.EdgeScans:
		ids := make([]ent.Value, 0, len(m.removedscans))
		for id := range m.removedscans {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CardMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedplaylist {
		edges = append(edges, card.EdgePlaylist)
	}
	if m.clearedscans {
		edges = append(edges, card.EdgeScans)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CardMutation) EdgeCleared(name string) bool {
	switch name {
	case card.EdgePlaylist:
		return m.clearedplaylist
	case card.EdgeScans:
		return m.clearedscans
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CardMutation) ClearEdge(name string) error {
	switch name {
	case card.EdgePlaylist:
		m.ClearPlaylist()
		return nil
	}
	return fmt.Errorf("unknown Card unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CardMutation) ResetEdge(name string) error {
	switch name {
	case card.EdgePlaylist:
		m.ResetPlaylist()
		return nil
	case card.EdgeScans:
		m.ResetScans()
		return nil
	}
	return fmt.Errorf("unknown Card edge %s", name)
}

// CardScanMutation represents an operation that mutates the CardScan nodes in the graph.
type CardScanMutation struct {
	config
	op              Op
	typ             string
	id              *int
	scan_at         *time.Time
	state           *cardscan.State
	result          *string
	clearedFields   map[string]struct{}
	playlist        *int
	clearedplaylist bool
	card            *int
	clearedcard     bool
	done            bool
	oldValue        func(context.Context) (*CardScan, error)
	predicates      []predicate.CardScan
}

var _ ent.Mutation = (*CardScanMutation)(nil)

// cardscanOption allows management of the mutation configuration using functional options.
type cardscanOption func(*CardScanMutation)

// newCardScanMutation creates new mutation for the CardScan entity.
func newCardScanMutation(c config, op Op, opts ...cardscanOption) *CardScanMutation {
	m := &CardScanMutation{
		config:        c,
		op:            op,
		typ:           TypeCardScan,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCardScanID sets the ID field of the mutation.
func withCardScanID(id int) cardscanOption {
	return func(m *CardScanMutation) {
		var (
			err   error
			once  sync.Once
			value *CardScan
		)
		m.oldValue = func(ctx context.Context) (*CardScan, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CardScan.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCardScan sets the old CardScan of the mutation.
func withCardScan(node *CardScan) cardscanOption {
	return func(m *CardScanMutation) {
		m.oldValue = func(context.Context) (*CardScan, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CardScanMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CardScanMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *CardScanMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetScanAt sets the "scan_at" field.
func (m *CardScanMutation) SetScanAt(t time.Time) {
	m.scan_at = &t
}

// ScanAt returns the value of the "scan_at" field in the mutation.
func (m *CardScanMutation) ScanAt() (r time.Time, exists bool) {
	v := m.scan_at
	if v == nil {
		return
	}
	return *v, true
}

// OldScanAt returns the old "scan_at" field's value of the CardScan entity.
// If the CardScan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CardScanMutation) OldScanAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldScanAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldScanAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScanAt: %w", err)
	}
	return oldValue.ScanAt, nil
}

// ResetScanAt resets all changes to the "scan_at" field.
func (m *CardScanMutation) ResetScanAt() {
	m.scan_at = nil
}

// SetState sets the "state" field.
func (m *CardScanMutation) SetState(c cardscan.State) {
	m.state = &c
}

// State returns the value of the "state" field in the mutation.
func (m *CardScanMutation) State() (r cardscan.State, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the CardScan entity.
// If the CardScan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CardScanMutation) OldState(ctx context.Context) (v cardscan.State, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *CardScanMutation) ResetState() {
	m.state = nil
}

// SetResult sets the "result" field.
func (m *CardScanMutation) SetResult(s string) {
	m.result = &s
}

// Result returns the value of the "result" field in the mutation.
func (m *CardScanMutation) Result() (r string, exists bool) {
	v := m.result
	if v == nil {
		return
	}
	return *v, true
}

// OldResult returns the old "result" field's value of the CardScan entity.
// If the CardScan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CardScanMutation) OldResult(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldResult is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldResult requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResult: %w", err)
	}
	return oldValue.Result, nil
}

// ClearResult clears the value of the "result" field.
func (m *CardScanMutation) ClearResult() {
	m.result = nil
	m.clearedFields[cardscan.FieldResult] = struct{}{}
}

// ResultCleared returns if the "result" field was cleared in this mutation.
func (m *CardScanMutation) ResultCleared() bool {
	_, ok := m.clearedFields[cardscan.FieldResult]
	return ok
}

// ResetResult resets all changes to the "result" field.
func (m *CardScanMutation) ResetResult() {
	m.result = nil
	delete(m.clearedFields, cardscan.FieldResult)
}

// SetPlaylistID sets the "playlist" edge to the Playlist entity by id.
func (m *CardScanMutation) SetPlaylistID(id int) {
	m.playlist = &id
}

// ClearPlaylist clears the "playlist" edge to the Playlist entity.
func (m *CardScanMutation) ClearPlaylist() {
	m.clearedplaylist = true
}

// PlaylistCleared returns if the "playlist" edge to the Playlist entity was cleared.
func (m *CardScanMutation) PlaylistCleared() bool {
	return m.clearedplaylist
}

// PlaylistID returns the "playlist" edge ID in the mutation.
func (m *CardScanMutation) PlaylistID() (id int, exists bool) {
	if m.playlist != nil {
		return *m.playlist, true
	}
	return
}

// PlaylistIDs returns the "playlist" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PlaylistID instead. It exists only for internal usage by the builders.
func (m *CardScanMutation) PlaylistIDs() (ids []int) {
	if id := m.playlist; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPlaylist resets all changes to the "playlist" edge.
func (m *CardScanMutation) ResetPlaylist() {
	m.playlist = nil
	m.clearedplaylist = false
}

// SetCardID sets the "card" edge to the Card entity by id.
func (m *CardScanMutation) SetCardID(id int) {
	m.card = &id
}

// ClearCard clears the "card" edge to the Card entity.
func (m *CardScanMutation) ClearCard() {
	m.clearedcard = true
}

// CardCleared returns if the "card" edge to the Card entity was cleared.
func (m *CardScanMutation) CardCleared() bool {
	return m.clearedcard
}

// CardID returns the "card" edge ID in the mutation.
func (m *CardScanMutation) CardID() (id int, exists bool) {
	if m.card != nil {
		return *m.card, true
	}
	return
}

// CardIDs returns the "card" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CardID instead. It exists only for internal usage by the builders.
func (m *CardScanMutation) CardIDs() (ids []int) {
	if id := m.card; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCard resets all changes to the "card" edge.
func (m *CardScanMutation) ResetCard() {
	m.card = nil
	m.clearedcard = false
}

// Op returns the operation name.
func (m *CardScanMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CardScan).
func (m *CardScanMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CardScanMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.scan_at != nil {
		fields = append(fields, cardscan.FieldScanAt)
	}
	if m.state != nil {
		fields = append(fields, cardscan.FieldState)
	}
	if m.result != nil {
		fields = append(fields, cardscan.FieldResult)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CardScanMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cardscan.FieldScanAt:
		return m.ScanAt()
	case cardscan.FieldState:
		return m.State()
	case cardscan.FieldResult:
		return m.Result()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CardScanMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cardscan.FieldScanAt:
		return m.OldScanAt(ctx)
	case cardscan.FieldState:
		return m.OldState(ctx)
	case cardscan.FieldResult:
		return m.OldResult(ctx)
	}
	return nil, fmt.Errorf("unknown CardScan field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CardScanMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cardscan.FieldScanAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScanAt(v)
		return nil
	case cardscan.FieldState:
		v, ok := value.(cardscan.State)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case cardscan.FieldResult:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResult(v)
		return nil
	}
	return fmt.Errorf("unknown CardScan field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CardScanMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CardScanMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CardScanMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CardScan numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CardScanMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(cardscan.FieldResult) {
		fields = append(fields, cardscan.FieldResult)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CardScanMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CardScanMutation) ClearField(name string) error {
	switch name {
	case cardscan.FieldResult:
		m.ClearResult()
		return nil
	}
	return fmt.Errorf("unknown CardScan nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CardScanMutation) ResetField(name string) error {
	switch name {
	case cardscan.FieldScanAt:
		m.ResetScanAt()
		return nil
	case cardscan.FieldState:
		m.ResetState()
		return nil
	case cardscan.FieldResult:
		m.ResetResult()
		return nil
	}
	return fmt.Errorf("unknown CardScan field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CardScanMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.playlist != nil {
		edges = append(edges, cardscan.EdgePlaylist)
	}
	if m.card != nil {
		edges = append(edges, cardscan.EdgeCard)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CardScanMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case cardscan.EdgePlaylist:
		if id := m.playlist; id != nil {
			return []ent.Value{*id}
		}
	case cardscan.EdgeCard:
		if id := m.card; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CardScanMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CardScanMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CardScanMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedplaylist {
		edges = append(edges, cardscan.EdgePlaylist)
	}
	if m.clearedcard {
		edges = append(edges, cardscan.EdgeCard)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CardScanMutation) EdgeCleared(name string) bool {
	switch name {
	case cardscan.EdgePlaylist:
		return m.clearedplaylist
	case cardscan.EdgeCard:
		return m.clearedcard
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CardScanMutation) ClearEdge(name string) error {
	switch name {
	case cardscan.EdgePlaylist:
		m.ClearPlaylist()
		return nil
	case cardscan.EdgeCard:
		m.ClearCard()
		return nil
	}
	return fmt.Errorf("unknown CardScan unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CardScanMutation) ResetEdge(name string) error {
	switch name {
	case cardscan.EdgePlaylist:
		m.ResetPlaylist()
		return nil
	case cardscan.EdgeCard:
		m.ResetCard()
		return nil
	}
	return fmt.Errorf("unknown CardScan edge %s", name)
}

// PlaylistMutation represents an operation that mutates the Playlist nodes in the graph.
type PlaylistMutation struct {
	config
	op                Op
	typ               string
	id                *int
	name              *string
	created           *time.Time
	modified          *time.Time
	media_url         *string
	clearedFields     map[string]struct{}
	card              *int
	clearedcard       bool
	card_scans        map[int]struct{}
	removedcard_scans map[int]struct{}
	clearedcard_scans bool
	done              bool
	oldValue          func(context.Context) (*Playlist, error)
	predicates        []predicate.Playlist
}

var _ ent.Mutation = (*PlaylistMutation)(nil)

// playlistOption allows management of the mutation configuration using functional options.
type playlistOption func(*PlaylistMutation)

// newPlaylistMutation creates new mutation for the Playlist entity.
func newPlaylistMutation(c config, op Op, opts ...playlistOption) *PlaylistMutation {
	m := &PlaylistMutation{
		config:        c,
		op:            op,
		typ:           TypePlaylist,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPlaylistID sets the ID field of the mutation.
func withPlaylistID(id int) playlistOption {
	return func(m *PlaylistMutation) {
		var (
			err   error
			once  sync.Once
			value *Playlist
		)
		m.oldValue = func(ctx context.Context) (*Playlist, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Playlist.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPlaylist sets the old Playlist of the mutation.
func withPlaylist(node *Playlist) playlistOption {
	return func(m *PlaylistMutation) {
		m.oldValue = func(context.Context) (*Playlist, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlaylistMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlaylistMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *PlaylistMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *PlaylistMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PlaylistMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Playlist entity.
// If the Playlist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaylistMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PlaylistMutation) ResetName() {
	m.name = nil
}

// SetCreated sets the "created" field.
func (m *PlaylistMutation) SetCreated(t time.Time) {
	m.created = &t
}

// Created returns the value of the "created" field in the mutation.
func (m *PlaylistMutation) Created() (r time.Time, exists bool) {
	v := m.created
	if v == nil {
		return
	}
	return *v, true
}

// OldCreated returns the old "created" field's value of the Playlist entity.
// If the Playlist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaylistMutation) OldCreated(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreated: %w", err)
	}
	return oldValue.Created, nil
}

// ResetCreated resets all changes to the "created" field.
func (m *PlaylistMutation) ResetCreated() {
	m.created = nil
}

// SetModified sets the "modified" field.
func (m *PlaylistMutation) SetModified(t time.Time) {
	m.modified = &t
}

// Modified returns the value of the "modified" field in the mutation.
func (m *PlaylistMutation) Modified() (r time.Time, exists bool) {
	v := m.modified
	if v == nil {
		return
	}
	return *v, true
}

// OldModified returns the old "modified" field's value of the Playlist entity.
// If the Playlist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaylistMutation) OldModified(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldModified is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldModified requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModified: %w", err)
	}
	return oldValue.Modified, nil
}

// ResetModified resets all changes to the "modified" field.
func (m *PlaylistMutation) ResetModified() {
	m.modified = nil
}

// SetMediaURL sets the "media_url" field.
func (m *PlaylistMutation) SetMediaURL(s string) {
	m.media_url = &s
}

// MediaURL returns the value of the "media_url" field in the mutation.
func (m *PlaylistMutation) MediaURL() (r string, exists bool) {
	v := m.media_url
	if v == nil {
		return
	}
	return *v, true
}

// OldMediaURL returns the old "media_url" field's value of the Playlist entity.
// If the Playlist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaylistMutation) OldMediaURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMediaURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMediaURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMediaURL: %w", err)
	}
	return oldValue.MediaURL, nil
}

// ResetMediaURL resets all changes to the "media_url" field.
func (m *PlaylistMutation) ResetMediaURL() {
	m.media_url = nil
}

// SetCardID sets the "card" edge to the Card entity by id.
func (m *PlaylistMutation) SetCardID(id int) {
	m.card = &id
}

// ClearCard clears the "card" edge to the Card entity.
func (m *PlaylistMutation) ClearCard() {
	m.clearedcard = true
}

// CardCleared returns if the "card" edge to the Card entity was cleared.
func (m *PlaylistMutation) CardCleared() bool {
	return m.clearedcard
}

// CardID returns the "card" edge ID in the mutation.
func (m *PlaylistMutation) CardID() (id int, exists bool) {
	if m.card != nil {
		return *m.card, true
	}
	return
}

// CardIDs returns the "card" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CardID instead. It exists only for internal usage by the builders.
func (m *PlaylistMutation) CardIDs() (ids []int) {
	if id := m.card; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCard resets all changes to the "card" edge.
func (m *PlaylistMutation) ResetCard() {
	m.card = nil
	m.clearedcard = false
}

// AddCardScanIDs adds the "card_scans" edge to the CardScan entity by ids.
func (m *PlaylistMutation) AddCardScanIDs(ids ...int) {
	if m.card_scans == nil {
		m.card_scans = make(map[int]struct{})
	}
	for i := range ids {
		m.card_scans[ids[i]] = struct{}{}
	}
}

// ClearCardScans clears the "card_scans" edge to the CardScan entity.
func (m *PlaylistMutation) ClearCardScans() {
	m.clearedcard_scans = true
}

// CardScansCleared returns if the "card_scans" edge to the CardScan entity was cleared.
func (m *PlaylistMutation) CardScansCleared() bool {
	return m.clearedcard_scans
}

// RemoveCardScanIDs removes the "card_scans" edge to the CardScan entity by IDs.
func (m *PlaylistMutation) RemoveCardScanIDs(ids ...int) {
	if m.removedcard_scans == nil {
		m.removedcard_scans = make(map[int]struct{})
	}
	for i := range ids {
		m.removedcard_scans[ids[i]] = struct{}{}
	}
}

// RemovedCardScans returns the removed IDs of the "card_scans" edge to the CardScan entity.
func (m *PlaylistMutation) RemovedCardScansIDs() (ids []int) {
	for id := range m.removedcard_scans {
		ids = append(ids, id)
	}
	return
}

// CardScansIDs returns the "card_scans" edge IDs in the mutation.
func (m *PlaylistMutation) CardScansIDs() (ids []int) {
	for id := range m.card_scans {
		ids = append(ids, id)
	}
	return
}

// ResetCardScans resets all changes to the "card_scans" edge.
func (m *PlaylistMutation) ResetCardScans() {
	m.card_scans = nil
	m.clearedcard_scans = false
	m.removedcard_scans = nil
}

// Op returns the operation name.
func (m *PlaylistMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Playlist).
func (m *PlaylistMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PlaylistMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, playlist.FieldName)
	}
	if m.created != nil {
		fields = append(fields, playlist.FieldCreated)
	}
	if m.modified != nil {
		fields = append(fields, playlist.FieldModified)
	}
	if m.media_url != nil {
		fields = append(fields, playlist.FieldMediaURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PlaylistMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case playlist.FieldName:
		return m.Name()
	case playlist.FieldCreated:
		return m.Created()
	case playlist.FieldModified:
		return m.Modified()
	case playlist.FieldMediaURL:
		return m.MediaURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PlaylistMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case playlist.FieldName:
		return m.OldName(ctx)
	case playlist.FieldCreated:
		return m.OldCreated(ctx)
	case playlist.FieldModified:
		return m.OldModified(ctx)
	case playlist.FieldMediaURL:
		return m.OldMediaURL(ctx)
	}
	return nil, fmt.Errorf("unknown Playlist field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlaylistMutation) SetField(name string, value ent.Value) error {
	switch name {
	case playlist.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case playlist.FieldCreated:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreated(v)
		return nil
	case playlist.FieldModified:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModified(v)
		return nil
	case playlist.FieldMediaURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMediaURL(v)
		return nil
	}
	return fmt.Errorf("unknown Playlist field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PlaylistMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PlaylistMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlaylistMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Playlist numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PlaylistMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PlaylistMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlaylistMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Playlist nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PlaylistMutation) ResetField(name string) error {
	switch name {
	case playlist.FieldName:
		m.ResetName()
		return nil
	case playlist.FieldCreated:
		m.ResetCreated()
		return nil
	case playlist.FieldModified:
		m.ResetModified()
		return nil
	case playlist.FieldMediaURL:
		m.ResetMediaURL()
		return nil
	}
	return fmt.Errorf("unknown Playlist field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PlaylistMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.card != nil {
		edges = append(edges, playlist.EdgeCard)
	}
	if m.card_scans != nil {
		edges = append(edges, playlist.EdgeCardScans)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PlaylistMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case playlist.EdgeCard:
		if id := m.card; id != nil {
			return []ent.Value{*id}
		}
	case playlist.EdgeCardScans:
		ids := make([]ent.Value, 0, len(m.card_scans))
		for id := range m.card_scans {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PlaylistMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcard_scans != nil {
		edges = append(edges, playlist.EdgeCardScans)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PlaylistMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case playlist.EdgeCardScans:
		ids := make([]ent.Value, 0, len(m.removedcard_scans))
		for id := range m.removedcard_scans {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PlaylistMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcard {
		edges = append(edges, playlist.EdgeCard)
	}
	if m.clearedcard_scans {
		edges = append(edges, playlist.EdgeCardScans)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PlaylistMutation) EdgeCleared(name string) bool {
	switch name {
	case playlist.EdgeCard:
		return m.clearedcard
	case playlist.EdgeCardScans:
		return m.clearedcard_scans
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PlaylistMutation) ClearEdge(name string) error {
	switch name {
	case playlist.EdgeCard:
		m.ClearCard()
		return nil
	}
	return fmt.Errorf("unknown Playlist unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PlaylistMutation) ResetEdge(name string) error {
	switch name {
	case playlist.EdgeCard:
		m.ResetCard()
		return nil
	case playlist.EdgeCardScans:
		m.ResetCardScans()
		return nil
	}
	return fmt.Errorf("unknown Playlist edge %s", name)
}
