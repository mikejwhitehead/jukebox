// Code generated by entc, DO NOT EDIT.

package card

import (
	"time"
)

const (
	// Label holds the string label denoting the card type in the database.
	Label = "card"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCreated holds the string denoting the created field in the database.
	FieldCreated = "created"
	// FieldModified holds the string denoting the modified field in the database.
	FieldModified = "modified"

	// EdgePlaylist holds the string denoting the playlist edge name in mutations.
	EdgePlaylist = "playlist"
	// EdgeScans holds the string denoting the scans edge name in mutations.
	EdgeScans = "scans"

	// Table holds the table name of the card in the database.
	Table = "cards"
	// PlaylistTable is the table the holds the playlist relation/edge.
	PlaylistTable = "cards"
	// PlaylistInverseTable is the table name for the Playlist entity.
	// It exists in this package in order to avoid circular dependency with the "playlist" package.
	PlaylistInverseTable = "playlists"
	// PlaylistColumn is the table column denoting the playlist relation/edge.
	PlaylistColumn = "playlist_card"
	// ScansTable is the table the holds the scans relation/edge.
	ScansTable = "card_scans"
	// ScansInverseTable is the table name for the CardScan entity.
	// It exists in this package in order to avoid circular dependency with the "cardscan" package.
	ScansInverseTable = "card_scans"
	// ScansColumn is the table column denoting the scans relation/edge.
	ScansColumn = "card_scan_card"
)

// Columns holds all SQL columns for card fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCreated,
	FieldModified,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Card type.
var ForeignKeys = []string{
	"playlist_card",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreated holds the default value on creation for the "created" field.
	DefaultCreated func() time.Time
	// DefaultModified holds the default value on creation for the "modified" field.
	DefaultModified func() time.Time
	// UpdateDefaultModified holds the default value on update for the "modified" field.
	UpdateDefaultModified func() time.Time
)
