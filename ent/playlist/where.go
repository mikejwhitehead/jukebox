// Code generated by entc, DO NOT EDIT.

package playlist

import (
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/mikejwhitehead/jukebox/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Created applies equality check predicate on the "created" field. It's identical to CreatedEQ.
func Created(v time.Time) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreated), v))
	})
}

// Modified applies equality check predicate on the "modified" field. It's identical to ModifiedEQ.
func Modified(v time.Time) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModified), v))
	})
}

// MediaURL applies equality check predicate on the "media_url" field. It's identical to MediaURLEQ.
func MediaURL(v string) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMediaURL), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Playlist {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Playlist(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Playlist {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Playlist(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// CreatedEQ applies the EQ predicate on the "created" field.
func CreatedEQ(v time.Time) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreated), v))
	})
}

// CreatedNEQ applies the NEQ predicate on the "created" field.
func CreatedNEQ(v time.Time) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreated), v))
	})
}

// CreatedIn applies the In predicate on the "created" field.
func CreatedIn(vs ...time.Time) predicate.Playlist {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Playlist(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreated), v...))
	})
}

// CreatedNotIn applies the NotIn predicate on the "created" field.
func CreatedNotIn(vs ...time.Time) predicate.Playlist {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Playlist(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreated), v...))
	})
}

// CreatedGT applies the GT predicate on the "created" field.
func CreatedGT(v time.Time) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreated), v))
	})
}

// CreatedGTE applies the GTE predicate on the "created" field.
func CreatedGTE(v time.Time) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreated), v))
	})
}

// CreatedLT applies the LT predicate on the "created" field.
func CreatedLT(v time.Time) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreated), v))
	})
}

// CreatedLTE applies the LTE predicate on the "created" field.
func CreatedLTE(v time.Time) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreated), v))
	})
}

// ModifiedEQ applies the EQ predicate on the "modified" field.
func ModifiedEQ(v time.Time) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModified), v))
	})
}

// ModifiedNEQ applies the NEQ predicate on the "modified" field.
func ModifiedNEQ(v time.Time) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldModified), v))
	})
}

// ModifiedIn applies the In predicate on the "modified" field.
func ModifiedIn(vs ...time.Time) predicate.Playlist {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Playlist(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldModified), v...))
	})
}

// ModifiedNotIn applies the NotIn predicate on the "modified" field.
func ModifiedNotIn(vs ...time.Time) predicate.Playlist {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Playlist(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldModified), v...))
	})
}

// ModifiedGT applies the GT predicate on the "modified" field.
func ModifiedGT(v time.Time) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldModified), v))
	})
}

// ModifiedGTE applies the GTE predicate on the "modified" field.
func ModifiedGTE(v time.Time) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldModified), v))
	})
}

// ModifiedLT applies the LT predicate on the "modified" field.
func ModifiedLT(v time.Time) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldModified), v))
	})
}

// ModifiedLTE applies the LTE predicate on the "modified" field.
func ModifiedLTE(v time.Time) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldModified), v))
	})
}

// MediaURLEQ applies the EQ predicate on the "media_url" field.
func MediaURLEQ(v string) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMediaURL), v))
	})
}

// MediaURLNEQ applies the NEQ predicate on the "media_url" field.
func MediaURLNEQ(v string) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMediaURL), v))
	})
}

// MediaURLIn applies the In predicate on the "media_url" field.
func MediaURLIn(vs ...string) predicate.Playlist {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Playlist(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMediaURL), v...))
	})
}

// MediaURLNotIn applies the NotIn predicate on the "media_url" field.
func MediaURLNotIn(vs ...string) predicate.Playlist {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Playlist(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMediaURL), v...))
	})
}

// MediaURLGT applies the GT predicate on the "media_url" field.
func MediaURLGT(v string) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMediaURL), v))
	})
}

// MediaURLGTE applies the GTE predicate on the "media_url" field.
func MediaURLGTE(v string) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMediaURL), v))
	})
}

// MediaURLLT applies the LT predicate on the "media_url" field.
func MediaURLLT(v string) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMediaURL), v))
	})
}

// MediaURLLTE applies the LTE predicate on the "media_url" field.
func MediaURLLTE(v string) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMediaURL), v))
	})
}

// MediaURLContains applies the Contains predicate on the "media_url" field.
func MediaURLContains(v string) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMediaURL), v))
	})
}

// MediaURLHasPrefix applies the HasPrefix predicate on the "media_url" field.
func MediaURLHasPrefix(v string) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMediaURL), v))
	})
}

// MediaURLHasSuffix applies the HasSuffix predicate on the "media_url" field.
func MediaURLHasSuffix(v string) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMediaURL), v))
	})
}

// MediaURLEqualFold applies the EqualFold predicate on the "media_url" field.
func MediaURLEqualFold(v string) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMediaURL), v))
	})
}

// MediaURLContainsFold applies the ContainsFold predicate on the "media_url" field.
func MediaURLContainsFold(v string) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMediaURL), v))
	})
}

// HasCard applies the HasEdge predicate on the "card" edge.
func HasCard() predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CardTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CardTable, CardColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCardWith applies the HasEdge predicate on the "card" edge with a given conditions (other predicates).
func HasCardWith(preds ...predicate.Card) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CardInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CardTable, CardColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCardScans applies the HasEdge predicate on the "card_scans" edge.
func HasCardScans() predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CardScansTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, CardScansTable, CardScansColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCardScansWith applies the HasEdge predicate on the "card_scans" edge with a given conditions (other predicates).
func HasCardScansWith(preds ...predicate.CardScan) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CardScansInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, CardScansTable, CardScansColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Playlist) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Playlist) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Playlist) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		p(s.Not())
	})
}
